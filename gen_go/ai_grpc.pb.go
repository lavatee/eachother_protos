// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: ai.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AI_MakeInterview_FullMethodName               = "/AI/MakeInterview"
	AI_NextInterviewQuestion_FullMethodName       = "/AI/NextInterviewQuestion"
	AI_GetCurrentInterviewQuestion_FullMethodName = "/AI/GetCurrentInterviewQuestion"
	AI_GetUserCurrentInterviews_FullMethodName    = "/AI/GetUserCurrentInterviews"
	AI_CompleteInterview_FullMethodName           = "/AI/CompleteInterview"
	AI_MakeRoles_FullMethodName                   = "/AI/MakeRoles"
)

// AIClient is the client API for AI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIClient interface {
	MakeInterview(ctx context.Context, in *MakeInterviewRequest, opts ...grpc.CallOption) (*MakeInterviewResponse, error)
	NextInterviewQuestion(ctx context.Context, in *NextInterviewQuestionRequest, opts ...grpc.CallOption) (*NextInterviewQuestionResponse, error)
	GetCurrentInterviewQuestion(ctx context.Context, in *GetCurrentInterviewQuestionRequest, opts ...grpc.CallOption) (*GetCurrentInterviewQuestionResponse, error)
	GetUserCurrentInterviews(ctx context.Context, in *GetUserCurrentInterviewsRequest, opts ...grpc.CallOption) (*GetUserCurrentInterviewsResponse, error)
	CompleteInterview(ctx context.Context, in *CompleteInterviewRequest, opts ...grpc.CallOption) (*CompleteInterviewResponse, error)
	MakeRoles(ctx context.Context, in *MakeRolesRequest, opts ...grpc.CallOption) (*MakeRolesResponse, error)
}

type aIClient struct {
	cc grpc.ClientConnInterface
}

func NewAIClient(cc grpc.ClientConnInterface) AIClient {
	return &aIClient{cc}
}

func (c *aIClient) MakeInterview(ctx context.Context, in *MakeInterviewRequest, opts ...grpc.CallOption) (*MakeInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeInterviewResponse)
	err := c.cc.Invoke(ctx, AI_MakeInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) NextInterviewQuestion(ctx context.Context, in *NextInterviewQuestionRequest, opts ...grpc.CallOption) (*NextInterviewQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextInterviewQuestionResponse)
	err := c.cc.Invoke(ctx, AI_NextInterviewQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) GetCurrentInterviewQuestion(ctx context.Context, in *GetCurrentInterviewQuestionRequest, opts ...grpc.CallOption) (*GetCurrentInterviewQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentInterviewQuestionResponse)
	err := c.cc.Invoke(ctx, AI_GetCurrentInterviewQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) GetUserCurrentInterviews(ctx context.Context, in *GetUserCurrentInterviewsRequest, opts ...grpc.CallOption) (*GetUserCurrentInterviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCurrentInterviewsResponse)
	err := c.cc.Invoke(ctx, AI_GetUserCurrentInterviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) CompleteInterview(ctx context.Context, in *CompleteInterviewRequest, opts ...grpc.CallOption) (*CompleteInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteInterviewResponse)
	err := c.cc.Invoke(ctx, AI_CompleteInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) MakeRoles(ctx context.Context, in *MakeRolesRequest, opts ...grpc.CallOption) (*MakeRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeRolesResponse)
	err := c.cc.Invoke(ctx, AI_MakeRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServer is the server API for AI service.
// All implementations must embed UnimplementedAIServer
// for forward compatibility.
type AIServer interface {
	MakeInterview(context.Context, *MakeInterviewRequest) (*MakeInterviewResponse, error)
	NextInterviewQuestion(context.Context, *NextInterviewQuestionRequest) (*NextInterviewQuestionResponse, error)
	GetCurrentInterviewQuestion(context.Context, *GetCurrentInterviewQuestionRequest) (*GetCurrentInterviewQuestionResponse, error)
	GetUserCurrentInterviews(context.Context, *GetUserCurrentInterviewsRequest) (*GetUserCurrentInterviewsResponse, error)
	CompleteInterview(context.Context, *CompleteInterviewRequest) (*CompleteInterviewResponse, error)
	MakeRoles(context.Context, *MakeRolesRequest) (*MakeRolesResponse, error)
	mustEmbedUnimplementedAIServer()
}

// UnimplementedAIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServer struct{}

func (UnimplementedAIServer) MakeInterview(context.Context, *MakeInterviewRequest) (*MakeInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeInterview not implemented")
}
func (UnimplementedAIServer) NextInterviewQuestion(context.Context, *NextInterviewQuestionRequest) (*NextInterviewQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextInterviewQuestion not implemented")
}
func (UnimplementedAIServer) GetCurrentInterviewQuestion(context.Context, *GetCurrentInterviewQuestionRequest) (*GetCurrentInterviewQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentInterviewQuestion not implemented")
}
func (UnimplementedAIServer) GetUserCurrentInterviews(context.Context, *GetUserCurrentInterviewsRequest) (*GetUserCurrentInterviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCurrentInterviews not implemented")
}
func (UnimplementedAIServer) CompleteInterview(context.Context, *CompleteInterviewRequest) (*CompleteInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteInterview not implemented")
}
func (UnimplementedAIServer) MakeRoles(context.Context, *MakeRolesRequest) (*MakeRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeRoles not implemented")
}
func (UnimplementedAIServer) mustEmbedUnimplementedAIServer() {}
func (UnimplementedAIServer) testEmbeddedByValue()            {}

// UnsafeAIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServer will
// result in compilation errors.
type UnsafeAIServer interface {
	mustEmbedUnimplementedAIServer()
}

func RegisterAIServer(s grpc.ServiceRegistrar, srv AIServer) {
	// If the following call pancis, it indicates UnimplementedAIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AI_ServiceDesc, srv)
}

func _AI_MakeInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).MakeInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_MakeInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).MakeInterview(ctx, req.(*MakeInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_NextInterviewQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextInterviewQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).NextInterviewQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_NextInterviewQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).NextInterviewQuestion(ctx, req.(*NextInterviewQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_GetCurrentInterviewQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentInterviewQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).GetCurrentInterviewQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_GetCurrentInterviewQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).GetCurrentInterviewQuestion(ctx, req.(*GetCurrentInterviewQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_GetUserCurrentInterviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCurrentInterviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).GetUserCurrentInterviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_GetUserCurrentInterviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).GetUserCurrentInterviews(ctx, req.(*GetUserCurrentInterviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_CompleteInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).CompleteInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_CompleteInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).CompleteInterview(ctx, req.(*CompleteInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_MakeRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).MakeRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_MakeRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).MakeRoles(ctx, req.(*MakeRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AI_ServiceDesc is the grpc.ServiceDesc for AI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AI",
	HandlerType: (*AIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeInterview",
			Handler:    _AI_MakeInterview_Handler,
		},
		{
			MethodName: "NextInterviewQuestion",
			Handler:    _AI_NextInterviewQuestion_Handler,
		},
		{
			MethodName: "GetCurrentInterviewQuestion",
			Handler:    _AI_GetCurrentInterviewQuestion_Handler,
		},
		{
			MethodName: "GetUserCurrentInterviews",
			Handler:    _AI_GetUserCurrentInterviews_Handler,
		},
		{
			MethodName: "CompleteInterview",
			Handler:    _AI_CompleteInterview_Handler,
		},
		{
			MethodName: "MakeRoles",
			Handler:    _AI_MakeRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai.proto",
}
