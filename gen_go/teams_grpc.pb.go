// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: teams.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Teams_PostTeam_FullMethodName           = "/Teams/PostTeam"
	Teams_GetTeams_FullMethodName           = "/Teams/GetTeams"
	Teams_GetOneTeam_FullMethodName         = "/Teams/GetOneTeam"
	Teams_DeleteTeam_FullMethodName         = "/Teams/DeleteTeam"
	Teams_EditTeam_FullMethodName           = "/Teams/EditTeam"
	Teams_JoinTeam_FullMethodName           = "/Teams/JoinTeam"
	Teams_LeaveTeam_FullMethodName          = "/Teams/LeaveTeam"
	Teams_GetUser_FullMethodName            = "/Teams/GetUser"
	Teams_GetTeamUsers_FullMethodName       = "/Teams/GetTeamUsers"
	Teams_GetUserTeams_FullMethodName       = "/Teams/GetUserTeams"
	Teams_GetCreatorRequests_FullMethodName = "/Teams/GetCreatorRequests"
	Teams_PostRequest_FullMethodName        = "/Teams/PostRequest"
	Teams_RejectRequest_FullMethodName      = "/Teams/RejectRequest"
	Teams_GetUserExps_FullMethodName        = "/Teams/GetUserExps"
	Teams_MakeRef_FullMethodName            = "/Teams/MakeRef"
	Teams_GetRefInfo_FullMethodName         = "/Teams/GetRefInfo"
	Teams_JoinTeamByRef_FullMethodName      = "/Teams/JoinTeamByRef"
)

// TeamsClient is the client API for Teams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamsClient interface {
	PostTeam(ctx context.Context, in *PostTeamRequest, opts ...grpc.CallOption) (*PostTeamResponse, error)
	GetTeams(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (*GetTeamsResponse, error)
	GetOneTeam(ctx context.Context, in *GetOneTeamRequest, opts ...grpc.CallOption) (*GetOneTeamResponse, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	EditTeam(ctx context.Context, in *EditTeamRequest, opts ...grpc.CallOption) (*EditTeamResponse, error)
	JoinTeam(ctx context.Context, in *JoinTeamRequest, opts ...grpc.CallOption) (*JoinTeamResponse, error)
	LeaveTeam(ctx context.Context, in *LeaveTeamRequest, opts ...grpc.CallOption) (*LeaveTeamResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetTeamUsers(ctx context.Context, in *GetTeamUsersRequest, opts ...grpc.CallOption) (*GetTeamUsersResponse, error)
	GetUserTeams(ctx context.Context, in *GetUserTeamsRequest, opts ...grpc.CallOption) (*GetUserTeamsResponse, error)
	GetCreatorRequests(ctx context.Context, in *GetCreatorRequestsRequest, opts ...grpc.CallOption) (*GetCreatorRequestsResponse, error)
	PostRequest(ctx context.Context, in *PostRequestRequest, opts ...grpc.CallOption) (*PostRequestResponse, error)
	RejectRequest(ctx context.Context, in *RejectRequestRequest, opts ...grpc.CallOption) (*RejectRequestResponse, error)
	GetUserExps(ctx context.Context, in *GetUserExpsRequest, opts ...grpc.CallOption) (*GetUserExpsResponse, error)
	MakeRef(ctx context.Context, in *MakeRefRequest, opts ...grpc.CallOption) (*MakeRefResponse, error)
	GetRefInfo(ctx context.Context, in *GetRefInfoRequest, opts ...grpc.CallOption) (*GetRefInfoResponse, error)
	JoinTeamByRef(ctx context.Context, in *JoinTeamByRefRequest, opts ...grpc.CallOption) (*JoinTeamByRefResponse, error)
}

type teamsClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamsClient(cc grpc.ClientConnInterface) TeamsClient {
	return &teamsClient{cc}
}

func (c *teamsClient) PostTeam(ctx context.Context, in *PostTeamRequest, opts ...grpc.CallOption) (*PostTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostTeamResponse)
	err := c.cc.Invoke(ctx, Teams_PostTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetTeams(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (*GetTeamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamsResponse)
	err := c.cc.Invoke(ctx, Teams_GetTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetOneTeam(ctx context.Context, in *GetOneTeamRequest, opts ...grpc.CallOption) (*GetOneTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneTeamResponse)
	err := c.cc.Invoke(ctx, Teams_GetOneTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, Teams_DeleteTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) EditTeam(ctx context.Context, in *EditTeamRequest, opts ...grpc.CallOption) (*EditTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditTeamResponse)
	err := c.cc.Invoke(ctx, Teams_EditTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) JoinTeam(ctx context.Context, in *JoinTeamRequest, opts ...grpc.CallOption) (*JoinTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinTeamResponse)
	err := c.cc.Invoke(ctx, Teams_JoinTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) LeaveTeam(ctx context.Context, in *LeaveTeamRequest, opts ...grpc.CallOption) (*LeaveTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveTeamResponse)
	err := c.cc.Invoke(ctx, Teams_LeaveTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, Teams_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetTeamUsers(ctx context.Context, in *GetTeamUsersRequest, opts ...grpc.CallOption) (*GetTeamUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamUsersResponse)
	err := c.cc.Invoke(ctx, Teams_GetTeamUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetUserTeams(ctx context.Context, in *GetUserTeamsRequest, opts ...grpc.CallOption) (*GetUserTeamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTeamsResponse)
	err := c.cc.Invoke(ctx, Teams_GetUserTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetCreatorRequests(ctx context.Context, in *GetCreatorRequestsRequest, opts ...grpc.CallOption) (*GetCreatorRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreatorRequestsResponse)
	err := c.cc.Invoke(ctx, Teams_GetCreatorRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) PostRequest(ctx context.Context, in *PostRequestRequest, opts ...grpc.CallOption) (*PostRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostRequestResponse)
	err := c.cc.Invoke(ctx, Teams_PostRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) RejectRequest(ctx context.Context, in *RejectRequestRequest, opts ...grpc.CallOption) (*RejectRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectRequestResponse)
	err := c.cc.Invoke(ctx, Teams_RejectRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetUserExps(ctx context.Context, in *GetUserExpsRequest, opts ...grpc.CallOption) (*GetUserExpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserExpsResponse)
	err := c.cc.Invoke(ctx, Teams_GetUserExps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) MakeRef(ctx context.Context, in *MakeRefRequest, opts ...grpc.CallOption) (*MakeRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeRefResponse)
	err := c.cc.Invoke(ctx, Teams_MakeRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetRefInfo(ctx context.Context, in *GetRefInfoRequest, opts ...grpc.CallOption) (*GetRefInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRefInfoResponse)
	err := c.cc.Invoke(ctx, Teams_GetRefInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) JoinTeamByRef(ctx context.Context, in *JoinTeamByRefRequest, opts ...grpc.CallOption) (*JoinTeamByRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinTeamByRefResponse)
	err := c.cc.Invoke(ctx, Teams_JoinTeamByRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsServer is the server API for Teams service.
// All implementations must embed UnimplementedTeamsServer
// for forward compatibility.
type TeamsServer interface {
	PostTeam(context.Context, *PostTeamRequest) (*PostTeamResponse, error)
	GetTeams(context.Context, *GetTeamsRequest) (*GetTeamsResponse, error)
	GetOneTeam(context.Context, *GetOneTeamRequest) (*GetOneTeamResponse, error)
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	EditTeam(context.Context, *EditTeamRequest) (*EditTeamResponse, error)
	JoinTeam(context.Context, *JoinTeamRequest) (*JoinTeamResponse, error)
	LeaveTeam(context.Context, *LeaveTeamRequest) (*LeaveTeamResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetTeamUsers(context.Context, *GetTeamUsersRequest) (*GetTeamUsersResponse, error)
	GetUserTeams(context.Context, *GetUserTeamsRequest) (*GetUserTeamsResponse, error)
	GetCreatorRequests(context.Context, *GetCreatorRequestsRequest) (*GetCreatorRequestsResponse, error)
	PostRequest(context.Context, *PostRequestRequest) (*PostRequestResponse, error)
	RejectRequest(context.Context, *RejectRequestRequest) (*RejectRequestResponse, error)
	GetUserExps(context.Context, *GetUserExpsRequest) (*GetUserExpsResponse, error)
	MakeRef(context.Context, *MakeRefRequest) (*MakeRefResponse, error)
	GetRefInfo(context.Context, *GetRefInfoRequest) (*GetRefInfoResponse, error)
	JoinTeamByRef(context.Context, *JoinTeamByRefRequest) (*JoinTeamByRefResponse, error)
	mustEmbedUnimplementedTeamsServer()
}

// UnimplementedTeamsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeamsServer struct{}

func (UnimplementedTeamsServer) PostTeam(context.Context, *PostTeamRequest) (*PostTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTeam not implemented")
}
func (UnimplementedTeamsServer) GetTeams(context.Context, *GetTeamsRequest) (*GetTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (UnimplementedTeamsServer) GetOneTeam(context.Context, *GetOneTeamRequest) (*GetOneTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneTeam not implemented")
}
func (UnimplementedTeamsServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedTeamsServer) EditTeam(context.Context, *EditTeamRequest) (*EditTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTeam not implemented")
}
func (UnimplementedTeamsServer) JoinTeam(context.Context, *JoinTeamRequest) (*JoinTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeam not implemented")
}
func (UnimplementedTeamsServer) LeaveTeam(context.Context, *LeaveTeamRequest) (*LeaveTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveTeam not implemented")
}
func (UnimplementedTeamsServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedTeamsServer) GetTeamUsers(context.Context, *GetTeamUsersRequest) (*GetTeamUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamUsers not implemented")
}
func (UnimplementedTeamsServer) GetUserTeams(context.Context, *GetUserTeamsRequest) (*GetUserTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTeams not implemented")
}
func (UnimplementedTeamsServer) GetCreatorRequests(context.Context, *GetCreatorRequestsRequest) (*GetCreatorRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatorRequests not implemented")
}
func (UnimplementedTeamsServer) PostRequest(context.Context, *PostRequestRequest) (*PostRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRequest not implemented")
}
func (UnimplementedTeamsServer) RejectRequest(context.Context, *RejectRequestRequest) (*RejectRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectRequest not implemented")
}
func (UnimplementedTeamsServer) GetUserExps(context.Context, *GetUserExpsRequest) (*GetUserExpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserExps not implemented")
}
func (UnimplementedTeamsServer) MakeRef(context.Context, *MakeRefRequest) (*MakeRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeRef not implemented")
}
func (UnimplementedTeamsServer) GetRefInfo(context.Context, *GetRefInfoRequest) (*GetRefInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefInfo not implemented")
}
func (UnimplementedTeamsServer) JoinTeamByRef(context.Context, *JoinTeamByRefRequest) (*JoinTeamByRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeamByRef not implemented")
}
func (UnimplementedTeamsServer) mustEmbedUnimplementedTeamsServer() {}
func (UnimplementedTeamsServer) testEmbeddedByValue()               {}

// UnsafeTeamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamsServer will
// result in compilation errors.
type UnsafeTeamsServer interface {
	mustEmbedUnimplementedTeamsServer()
}

func RegisterTeamsServer(s grpc.ServiceRegistrar, srv TeamsServer) {
	// If the following call pancis, it indicates UnimplementedTeamsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Teams_ServiceDesc, srv)
}

func _Teams_PostTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).PostTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_PostTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).PostTeam(ctx, req.(*PostTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetTeams(ctx, req.(*GetTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetOneTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetOneTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetOneTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetOneTeam(ctx, req.(*GetOneTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_EditTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).EditTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_EditTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).EditTeam(ctx, req.(*EditTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_JoinTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).JoinTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_JoinTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).JoinTeam(ctx, req.(*JoinTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_LeaveTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).LeaveTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_LeaveTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).LeaveTeam(ctx, req.(*LeaveTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetTeamUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetTeamUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetTeamUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetTeamUsers(ctx, req.(*GetTeamUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetUserTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetUserTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetUserTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetUserTeams(ctx, req.(*GetUserTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetCreatorRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreatorRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetCreatorRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetCreatorRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetCreatorRequests(ctx, req.(*GetCreatorRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_PostRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).PostRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_PostRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).PostRequest(ctx, req.(*PostRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_RejectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).RejectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_RejectRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).RejectRequest(ctx, req.(*RejectRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetUserExps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetUserExps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetUserExps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetUserExps(ctx, req.(*GetUserExpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_MakeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).MakeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_MakeRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).MakeRef(ctx, req.(*MakeRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetRefInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetRefInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetRefInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetRefInfo(ctx, req.(*GetRefInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_JoinTeamByRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTeamByRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).JoinTeamByRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_JoinTeamByRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).JoinTeamByRef(ctx, req.(*JoinTeamByRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Teams_ServiceDesc is the grpc.ServiceDesc for Teams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Teams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Teams",
	HandlerType: (*TeamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTeam",
			Handler:    _Teams_PostTeam_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _Teams_GetTeams_Handler,
		},
		{
			MethodName: "GetOneTeam",
			Handler:    _Teams_GetOneTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Teams_DeleteTeam_Handler,
		},
		{
			MethodName: "EditTeam",
			Handler:    _Teams_EditTeam_Handler,
		},
		{
			MethodName: "JoinTeam",
			Handler:    _Teams_JoinTeam_Handler,
		},
		{
			MethodName: "LeaveTeam",
			Handler:    _Teams_LeaveTeam_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Teams_GetUser_Handler,
		},
		{
			MethodName: "GetTeamUsers",
			Handler:    _Teams_GetTeamUsers_Handler,
		},
		{
			MethodName: "GetUserTeams",
			Handler:    _Teams_GetUserTeams_Handler,
		},
		{
			MethodName: "GetCreatorRequests",
			Handler:    _Teams_GetCreatorRequests_Handler,
		},
		{
			MethodName: "PostRequest",
			Handler:    _Teams_PostRequest_Handler,
		},
		{
			MethodName: "RejectRequest",
			Handler:    _Teams_RejectRequest_Handler,
		},
		{
			MethodName: "GetUserExps",
			Handler:    _Teams_GetUserExps_Handler,
		},
		{
			MethodName: "MakeRef",
			Handler:    _Teams_MakeRef_Handler,
		},
		{
			MethodName: "GetRefInfo",
			Handler:    _Teams_GetRefInfo_Handler,
		},
		{
			MethodName: "JoinTeamByRef",
			Handler:    _Teams_JoinTeamByRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teams.proto",
}
